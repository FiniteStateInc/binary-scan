name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  pull-requests: write
  contents: read

env:
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ORGANIZATION_CONTEXT: ${{ secrets.ORGANIZATION_CONTEXT }}
  ASSET_ID: 2720805263

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test -- --passWithNoTests

  binary_scan:
    name: GitHub Actions Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Binary Scan
        id: binary_scan
        uses: ./
        with:
          finite-state-client-id: ${{ secrets.CLIENT_ID }}
          finite-state-secret: ${{ secrets.CLIENT_SECRET }}
          finite-state-organization-context: ${{ secrets.ORGANIZATION_CONTEXT }}
          asset-id: ${{env.ASSET_ID}}
          version: ${{ github.sha }}
          file-path: ./src/lib/utils/example_binary/esp-at.bin # Put the same path from the "Upload binary generated file" step here
          github-token: ${{ secrets.GITHUB_TOKEN }} # optional if you would like to generate the comment automatically in the PR
          automatic-comment: true # optional if you would like to generate the comment automatically in the PR

      - name: Set response of binary scan on Windows
        if: steps.binary_scan.outcome == 'success' && runner.os == 'Windows'
        id: set_response_windows
        run: |
          $json = @"
          {
            "asset-version-url": "${{steps.binary_scan.outputs.asset-version-url}}",
            "response": "${{steps.binary_scan.outputs.response}}",
            "error": "${{steps.binary_scan.outputs.error}}"
          }
          "@
          Write-Output "Asset version URL: $($json.'asset-version-url')"
          Write-Output "Response: $($json.response)"
          Write-Output "Error: $($json.error)"
        shell: pwsh

      - name: Set response of binary scan on Linux
        if: steps.binary_scan.outcome == 'success' && runner.os == 'Linux'
        id: set_response_linux
        run: |
          json='{
            "asset-version-url": "${{steps.binary_scan.outputs.asset-version-url}}",
            "response": "${{steps.binary_scan.outputs.response}}",
            "error": "${{steps.binary_scan.outputs.error}}"
          }'
          echo "Asset version URL: $(echo $json | jq -r '.asset-version-url')"
          echo "Response: $(echo $json | jq -r '.response')"
          echo "Error: $(echo $json | jq -r '.error')"
        shell: bash
        env:
          ASSET_VERSION_URL: ${{steps.binary_scan.outputs.asset-version-url}}
          RESPONSE: ${{steps.binary_scan.outputs.response}}
          ERROR: ${{steps.binary_scan.outputs.error}}
